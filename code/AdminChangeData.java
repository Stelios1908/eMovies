/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ceid.db.tvondemandclientsideapp;

import java.sql.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dimet
 */
public class AdminChangeData extends javax.swing.JFrame {

    /**
     * Creates new form AdminChangeData
     */
    public AdminChangeData() {
        initComponents();
        fetchCustomers();
        fetchEmployees();
        fetchAdmins();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer id", "Email", "First name", "Last name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTabbedPane1.addTab("Customers", jScrollPane1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee id", "Email", "First name", "Last name"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jTabbedPane1.addTab("Employees", jScrollPane2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Admin id", "Email", "First name", "Last name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jTabbedPane1.addTab("Administrators", jScrollPane3);

        jButton1.setText("Insert new user");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete existing user [Customer or Employee]");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Give/Reclaim admin privileges");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jButton1)
                .addGap(82, 82, 82)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AdminInsert admins = new AdminInsert();
        admins.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(!jTable3.getSelectionModel().isSelectionEmpty())
        {
            JOptionPane.showMessageDialog(new JFrame(),"Deletion is only available for customers or employees");
            jTable3.clearSelection();
        }  
        else if(!jTable2.getSelectionModel().isSelectionEmpty())
        {
            int Employeeid = (Integer)jTable2.getValueAt(jTable2.getSelectedRow(), 0);
            
        String employeedel = "Delete from employee where employee_id ="+Employeeid;
        try(Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/tvondemandv2", "tester", "@Toor1234");)
        {
            Statement st = con.createStatement();
            st.executeUpdate(employeedel);
          
          
           st.close();
           con.close();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
            
            
            JOptionPane.showMessageDialog(new JFrame(),"You successfully deleted that employee");
            jTable2.clearSelection();
            jTable2.setModel(new DefaultTableModel(null,new String []{"Employee id","Email","First name","Last name"}));
            fetchEmployees();
        }
        else if(!jTable1.getSelectionModel().isSelectionEmpty())
        {
            
         int Customerid = (Integer)jTable1.getValueAt(jTable1.getSelectedRow(), 0);
            
        String custdel = "Delete from customer where customer_id ="+Customerid;
        try(Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/tvondemandv2", "tester", "@Toor1234");)
        {
            Statement st = con.createStatement();
            st.executeUpdate(custdel);
          
          
           st.close();
           con.close();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        
        JOptionPane.showMessageDialog(new JFrame(),"You successfully deleted that customer");
        
        jTable1.clearSelection();
        jTable1.setModel(new DefaultTableModel(null,new String []{"Customer id","Email","First name","Last name"}));
        fetchCustomers();
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
         if(!jTable3.getSelectionModel().isSelectionEmpty())
        {
            System.out.println("admin");
            int Adminid = (Integer)jTable3.getValueAt(jTable3.getSelectedRow(), 0);
            
        String Admindel = "Delete from administrator where admin_id ="+Adminid;
        String addrid = "select address_id from administrator where admin_id ="+Adminid;
        
        
        try(Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/tvondemandv2", "tester", "@Toor1234");)
        {
            Statement st = con.createStatement();
            Statement st2 = con.createStatement();
            Statement st3 = con.createStatement();
            Statement st4 = con.createStatement();
            ResultSet adrid = st.executeQuery(addrid);
            adrid.next();
            
            
            String nempemail = jTable3.getValueAt(jTable3.getSelectedRow(), 1).toString();
            String newempemail = nempemail.substring(0,nempemail.indexOf("@"))+"@sakilaemployee.org";
            System.out.println(newempemail);
            
            
            st2.executeUpdate("Insert into employee VALUES("+Adminid+",'"+jTable3.getValueAt(jTable3.getSelectedRow(), 2)
                +"','"+jTable3.getValueAt(jTable3.getSelectedRow(), 3)+"','"+newempemail+
                "',"+adrid.getInt(1)+")");
            st3.executeUpdate(Admindel);
            
            st4.executeUpdate("Update user set email = '"+newempemail+"' where u_id = "+Adminid);
            
            
           st3.close();
           st2.close();
           st.close();
           con.close();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
            JOptionPane.showMessageDialog(new JFrame(),"You successfully made that admin employee");
           
                    
           jTable3.setModel(new DefaultTableModel(null,new String []{"Employee id","Email","First name","Last name"})); 
           jTable2.setModel(new DefaultTableModel(null,new String []{"Employee id","Email","First name","Last name"}));
             fetchEmployees();
            fetchAdmins();
            
            jTable3.clearSelection();            
            
            
        }  
         
         
         
        else if(!jTable2.getSelectionModel().isSelectionEmpty())
        {
            System.out.println("Empl");
            int Employeeid = (Integer)jTable2.getValueAt(jTable2.getSelectedRow(), 0);
            
        String employeedel = "Delete from employee where employee_id ="+Employeeid;
        String addrid = "select address_id from employee where employee_id = "+Employeeid;
        String insertnewadm = "Insert into administrator VALUES("+Employeeid+",'"+jTable2.getValueAt(jTable2.getSelectedRow(), 2)
                +"','"+jTable2.getValueAt(jTable2.getSelectedRow(), 3)+"','"+jTable2.getValueAt(jTable2.getSelectedRow(), 1)+
                "',"+addrid+")";
        
        try(Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/tvondemandv2", "tester", "@Toor1234");)
        {
            Statement st = con.createStatement();
            Statement st2 = con.createStatement();
            Statement st3 = con.createStatement();
            Statement st4 = con.createStatement();
            ResultSet adrid = st.executeQuery(addrid);
            adrid.next();
            System.out.println(adrid.getInt(1));
            
            String nemail = jTable2.getValueAt(jTable2.getSelectedRow(), 1).toString();
            String newemail = nemail.substring(0,nemail.indexOf("@"))+"@sakilaadmin.org";
            System.out.println(newemail);
            
            
            st2.executeUpdate("Insert into administrator VALUES("+Employeeid+",'"+jTable2.getValueAt(jTable2.getSelectedRow(), 2)
                +"','"+jTable2.getValueAt(jTable2.getSelectedRow(), 3)+"','"+newemail+
                "',"+adrid.getInt(1)+")");
            
              st3.execute(employeedel);
            st4.executeUpdate("Update user set email = '"+newemail+"' where u_id = "+Employeeid);
              
            
           st3.close();
           st2.close();
           st.close();
           con.close();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
            
            
            JOptionPane.showMessageDialog(new JFrame(),"You successfully made that employee admin");
            jTable2.clearSelection();
             jTable3.setModel(new DefaultTableModel(null,new String []{"Employee id","Email","First name","Last name"})); 
           jTable2.setModel(new DefaultTableModel(null,new String []{"Employee id","Email","First name","Last name"}));
            fetchEmployees();
            fetchAdmins();
            
        }
        else if(!jTable1.getSelectionModel().isSelectionEmpty())
        {
              JOptionPane.showMessageDialog(new JFrame(),"This action is only available for employees");
            jTable1.clearSelection();
        
        }
        
 
        
       
    }//GEN-LAST:event_jButton3ActionPerformed

    
    
    public void fetchCustomers()
    {
         
        String fetchquery = "select customer_id,email,first_name,last_name from customer";
        
        try(Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/tvondemandv2", "tester", "@Toor1234");)
        {
            Statement st = con.createStatement();
            ResultSet customers = st.executeQuery(fetchquery);
                       
            while(customers.next())
            {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.addRow(new Object[]{customers.getInt(1), customers.getString(2), customers.getString(3),customers.getString(4)});
                
            }
                       
            
           customers.close();
           st.close();
           con.close();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        jTable1.setAutoCreateRowSorter(true);
    }
    
    
    public void fetchEmployees()
    {
         String fetchquery = "select employee_id,email,first_name,last_name from employee";
        
        try(Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/tvondemandv2", "tester", "@Toor1234");)
        {
            Statement st = con.createStatement();
            ResultSet customers = st.executeQuery(fetchquery);
                       
            while(customers.next())
            {
                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                model.addRow(new Object[]{customers.getInt(1), customers.getString(2), customers.getString(3),customers.getString(4)});
                
            }
                       
            
           customers.close();
           st.close();
           con.close();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        jTable2.setAutoCreateRowSorter(true);
    }
    
    
    public void fetchAdmins()
    {
        
         String fetchquery = "select admin_id,email,first_name,last_name from administrator";
        
        try(Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/tvondemandv2", "tester", "@Toor1234");)
        {
            Statement st = con.createStatement();
            ResultSet customers = st.executeQuery(fetchquery);
                       
            while(customers.next())
            {
                DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
                model.addRow(new Object[]{customers.getInt(1), customers.getString(2), customers.getString(3),customers.getString(4)});
                
            }
                       
            
           customers.close();
           st.close();
           con.close();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        jTable3.setAutoCreateRowSorter(true);
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminChangeData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminChangeData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminChangeData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminChangeData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminChangeData().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
